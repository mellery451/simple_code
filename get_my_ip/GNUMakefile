
CCC = gcc
CPP = g++
CFLAGS = -Wall
LDFLAGS =

# ---------
#
CPP_EXTS = cpp cxx cc C c++

CCC_SOURCE_FILES = $(wildcard *.c)
CPP_SOURCE_FILES = $(wildcard $(foreach ext, $(CPP_EXTS), *.$(ext)))
SOURCE_FILES = $(CCC_SOURCE_FILES) $(CPP_SOURCE_FILES)

ifeq ($(CPP_SOURCE_FILES),)
  CC = $(CCC)
else
  CC = $(CPP)
endif

ORPHAN_H = $(filter-out $(addsuffix .h, $(basename $(SOURCE_FILES))), $(wildcard *.h))

CCC_OBJS = $(addsuffix .o, $(basename $(CCC_SOURCE_FILES)))
CPP_OBJS = $(addsuffix .o, $(basename $(CPP_SOURCE_FILES)))
ALL_OBJS = $(CCC_OBJS) $(CPP_OBJS)

# ---------
#
grep_cmd = grep -l '^[ \t\v]*[^/]*.*\<main[ \t\v]*(' $(SOURCE_FILES)
BIN_NAME = $(basename $(shell $(grep_cmd)))

ifneq ($(words $(BIN_NAME)),1)
$(error Only one file may use the word 'main(' ))
endif

obj_to_src = $(foreach name, $(foreach ext, $(CPP_EXTS), $(addsuffix .$(ext), $(basename $(1)))), $(filter $(name), $(CPP_SOURCE_FILES)))

$(BIN_NAME): $(ALL_OBJS) $(filter $(BIN_NAME).h, $(wildcard *.h))
	$(CC) $(CFLAGS) $(ALL_OBJS) $(LDFLAGS) -o $(BIN_NAME)

ifneq ($(CCC_OBJS),)
$(CCC_OBJS): $(addsuffix .c, $(*F)) $(filter $(addsuffix .h, $(basename $@)), $(wildcard *.h)) $(ORPHAN_H)
	$(CCC) $(CFLAGS) -c $(addsuffix .c, $(*F)) -o $@
endif

ifneq ($(CPP_OBJS),)
$(CPP_OBJS): $(call obj_to_src, $@) $(filter $(addsuffix .h, $(basename $@)), $(wildcard *.h)) $(ORPHAN_H)
	$(CPP) $(CFLAGS) -c $(call obj_to_src, $@) -o $@
endif

.PHONY: clean
clean: FORCE
	rm -f *.o

.PHONY: cleaner
cleaner: FORCE
	rm -f *.o $(BIN_NAME)

FORCE:

